{"ast":null,"code":"import _toConsumableArray from\"/Users/Dani/Desktop/webrtc/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _defineProperty from\"/Users/Dani/Desktop/webrtc/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _objectSpread from\"/Users/Dani/Desktop/webrtc/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _classCallCheck from\"/Users/Dani/Desktop/webrtc/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/Dani/Desktop/webrtc/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"/Users/Dani/Desktop/webrtc/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/Dani/Desktop/webrtc/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import React,{Component}from'react';import io from'socket.io-client';import Video from'./components/video';import Videos from'./components/videos';import Chat from'./components/chat';import Draggable from'./components/draggable';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);var _super=_createSuper(App);function App(props){var _this;_classCallCheck(this,App);_this=_super.call(this,props);_this.getLocalStream=function(){// called when getUserMedia() successfully returns - see below\n// getUserMedia() returns a MediaStream object (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\nvar success=function success(stream){window.localStream=stream;// this.localVideoref.current.srcObject = stream\n// this.pc.addStream(stream);\n_this.setState({localStream:stream});_this.whoisOnline();};// called when getUserMedia() fails - see below\nvar failure=function failure(e){console.log('getUserMedia Error: ',e);};// https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n// see the above link for more constraint options\nvar constraints={audio:true,video:true,// video: {\n//   width: 1280,\n//   height: 720\n// },\n// video: {\n//   width: { min: 1280 },\n// }\noptions:{mirror:true}};// https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\nnavigator.mediaDevices.getUserMedia(constraints).then(success).catch(failure);};_this.whoisOnline=function(){// let all peers know I am joining\n_this.sendToPeer('onlinePeers',null,{local:_this.socket.id});};_this.sendToPeer=function(messageType,payload,socketID){_this.socket.emit(messageType,{socketID:socketID,payload:payload});};_this.createPeerConnection=function(socketID,callback){try{var pc=new RTCPeerConnection(_this.state.pc_config);// add pc to peerConnections object\nvar peerConnections=_objectSpread(_objectSpread({},_this.state.peerConnections),{},_defineProperty({},socketID,pc));_this.setState({peerConnections:peerConnections});pc.onicecandidate=function(e){if(e.candidate){_this.sendToPeer('candidate',e.candidate,{local:_this.socket.id,remote:socketID});}};pc.oniceconnectionstatechange=function(e){// if (pc.iceConnectionState === 'disconnected') {\n//   const remoteStreams = this.state.remoteStreams.filter(stream => stream.id !== socketID)\n//   this.setState({\n//     remoteStream: remoteStreams.length > 0 && remoteStreams[0].stream || null,\n//   })\n// }\n};pc.ontrack=function(e){/*                let _remoteStream = null\n                let remoteStreams = this.state.remoteStreams\n                let remoteVideo = {}\n\n\n                // 1. check if stream already exists in remoteStreams\n                const rVideos = this.state.remoteStreams.filter(stream => stream.id === socketID)\n\n                // 2. if it does exist then add track\n                if (rVideos.length) {\n                    _remoteStream = rVideos[0].stream\n                    _remoteStream.addTrack(e.track, _remoteStream)\n                    remoteVideo = {\n                        ...rVideos[0],\n                        stream: _remoteStream,\n                    }\n                    remoteStreams = this.state.remoteStreams.map(_remoteVideo => {\n                        return _remoteVideo.id === remoteVideo.id && remoteVideo || _remoteVideo\n                    })\n                } else {\n                    // 3. if not, then create new stream and add track\n                    _remoteStream = new MediaStream()\n                    _remoteStream.addTrack(e.track, _remoteStream)\n\n                    remoteVideo = {\n                        id: socketID,\n                        name: socketID,\n                        stream: _remoteStream,\n                    }\n                    remoteStreams = [...this.state.remoteStreams, remoteVideo]\n                }\n*/var remoteVideo={id:socketID,name:socketID,stream:e.streams[0]};_this.setState(function(prevState){// If we already have a stream in display let it stay the same, otherwise use the latest stream\nvar remoteStream=prevState.remoteStreams.length>0?{}:{remoteStream:e.streams[0]};//const remoteStream = prevState.remoteStreams.length > 0 ? {} : { remoteStream: _remoteStream }\n// get currently selected video\nvar selectedVideo=prevState.remoteStreams.filter(function(stream){return stream.id===prevState.selectedVideo.id;});// if the video is still in the list, then do nothing, otherwise set to new video stream\nselectedVideo=selectedVideo.length?{}:{selectedVideo:remoteVideo};return _objectSpread(_objectSpread(_objectSpread({},selectedVideo),remoteStream),{},{remoteStreams:[].concat(_toConsumableArray(prevState.remoteStreams),[remoteVideo])});});};pc.close=function(){// alert('GONE')\n};if(_this.state.localStream)pc.addStream(_this.state.localStream);//this.state.localStream.getTracks().forEach(track => {\n//    pc.addTrack(track, this.state.localStream)\n//})\n// return pc\ncallback(pc);}catch(e){console.log('Something went wrong! pc not created!!',e);// return;\ncallback(null);}};_this.componentDidMount=function(){_this.socket=io.connect(_this.serviceIP,{path:'/io/webrtc',query:{room:window.location.pathname}});_this.socket.on('connection-success',function(data){_this.getLocalStream();console.log(data.success);var status=data.peerCount>1?\"Total Connected Peers to room \".concat(window.location.pathname,\": \").concat(data.peerCount):'Waiting for other peers to connect';_this.setState({status:status,messages:data.messages});});_this.socket.on('joined-peers',function(data){_this.setState({status:data.peerCount>1?\"Total Connected Peers to room \".concat(window.location.pathname,\": \").concat(data.peerCount):'Waiting for other peers to connect'});});_this.socket.on('peer-disconnected',function(data){console.log('peer-disconnected',data);var remoteStreams=_this.state.remoteStreams.filter(function(stream){return stream.id!==data.socketID;});_this.setState(function(prevState){// check if disconnected peer is the selected video and if there still connected peers, then select the first\nvar selectedVideo=prevState.selectedVideo.id===data.socketID&&remoteStreams.length?{selectedVideo:remoteStreams[0]}:null;return _objectSpread(_objectSpread({// remoteStream: remoteStreams.length > 0 && remoteStreams[0].stream || null,\nremoteStreams:remoteStreams},selectedVideo),{},{status:data.peerCount>1?\"Total Connected Peers to room \".concat(window.location.pathname,\": \").concat(data.peerCount):'Waiting for other peers to connect'});});});// this.socket.on('offerOrAnswer', (sdp) => {\n//   this.textref.value = JSON.stringify(sdp)\n//   // set sdp as remote description\n//   this.pc.setRemoteDescription(new RTCSessionDescription(sdp))\n// })\n_this.socket.on('online-peer',function(socketID){console.log('connected peers ...',socketID);// create and send offer to the peer (data.socketID)\n// 1. Create new pc\n_this.createPeerConnection(socketID,function(pc){// 2. Create Offer\nif(pc){// Send Channel\nvar handleSendChannelStatusChange=function handleSendChannelStatusChange(event){console.log('send channel status: '+_this.state.sendChannels[0].readyState);};var sendChannel=pc.createDataChannel('sendChannel');sendChannel.onopen=handleSendChannelStatusChange;sendChannel.onclose=handleSendChannelStatusChange;_this.setState(function(prevState){return{sendChannels:[].concat(_toConsumableArray(prevState.sendChannels),[sendChannel])};});// Receive Channels\nvar handleReceiveMessage=function handleReceiveMessage(event){var message=JSON.parse(event.data);console.log(message);_this.setState(function(prevState){return{messages:[].concat(_toConsumableArray(prevState.messages),[message])};});};var handleReceiveChannelStatusChange=function handleReceiveChannelStatusChange(event){if(_this.receiveChannel){console.log(\"receive channel's status has changed to \"+_this.receiveChannel.readyState);}};var receiveChannelCallback=function receiveChannelCallback(event){var receiveChannel=event.channel;receiveChannel.onmessage=handleReceiveMessage;receiveChannel.onopen=handleReceiveChannelStatusChange;receiveChannel.onclose=handleReceiveChannelStatusChange;};pc.ondatachannel=receiveChannelCallback;pc.createOffer(_this.state.sdpConstraints).then(function(sdp){pc.setLocalDescription(sdp);_this.sendToPeer('offer',sdp,{local:_this.socket.id,remote:socketID});});}});});_this.socket.on('offer',function(data){_this.createPeerConnection(data.socketID,function(pc){pc.addStream(_this.state.localStream);// Send Channel\nvar handleSendChannelStatusChange=function handleSendChannelStatusChange(event){console.log('send channel status: '+_this.state.sendChannels[0].readyState);};var sendChannel=pc.createDataChannel('sendChannel');sendChannel.onopen=handleSendChannelStatusChange;sendChannel.onclose=handleSendChannelStatusChange;_this.setState(function(prevState){return{sendChannels:[].concat(_toConsumableArray(prevState.sendChannels),[sendChannel])};});// Receive Channels\nvar handleReceiveMessage=function handleReceiveMessage(event){var message=JSON.parse(event.data);console.log(message);_this.setState(function(prevState){return{messages:[].concat(_toConsumableArray(prevState.messages),[message])};});};var handleReceiveChannelStatusChange=function handleReceiveChannelStatusChange(event){if(_this.receiveChannel){console.log(\"receive channel's status has changed to \"+_this.receiveChannel.readyState);}};var receiveChannelCallback=function receiveChannelCallback(event){var receiveChannel=event.channel;receiveChannel.onmessage=handleReceiveMessage;receiveChannel.onopen=handleReceiveChannelStatusChange;receiveChannel.onclose=handleReceiveChannelStatusChange;};pc.ondatachannel=receiveChannelCallback;pc.setRemoteDescription(new RTCSessionDescription(data.sdp)).then(function(){// 2. Create Answer\npc.createAnswer(_this.state.sdpConstraints).then(function(sdp){pc.setLocalDescription(sdp);_this.sendToPeer('answer',sdp,{local:_this.socket.id,remote:data.socketID});});});});});_this.socket.on('answer',function(data){// get remote's peerConnection\nvar pc=_this.state.peerConnections[data.socketID];console.log(data.sdp);pc.setRemoteDescription(new RTCSessionDescription(data.sdp)).then(function(){});});_this.socket.on('candidate',function(data){// get remote's peerConnection\nvar pc=_this.state.peerConnections[data.socketID];if(pc)pc.addIceCandidate(new RTCIceCandidate(data.candidate));});// const pc_config = null\n// const pc_config = {\n//   \"iceServers\": [\n//     // {\n//     //   urls: 'stun:[STUN_IP]:[PORT]',\n//     //   'credentials': '[YOR CREDENTIALS]',\n//     //   'username': '[USERNAME]'\n//     // },\n//     {\n//       urls : 'stun:stun.l.google.com:19302'\n//     }\n//   ]\n// }\n// https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\n// create an instance of RTCPeerConnection\n// this.pc = new RTCPeerConnection(this.state.pc_config)\n// triggered when a new candidate is returned\n// this.pc.onicecandidate = (e) => {\n//   // send the candidates to the remote peer\n//   // see addCandidate below to be triggered on the remote peer\n//   if (e.candidate) {\n//     // console.log(JSON.stringify(e.candidate))\n//     this.sendToPeer('candidate', e.candidate)\n//   }\n// }\n// triggered when there is a change in connection state\n// this.pc.oniceconnectionstatechange = (e) => {\n//   console.log(e)\n// }\n// triggered when a stream is added to pc, see below - this.pc.addStream(stream)\n// this.pc.onaddstream = (e) => {\n//   this.remoteVideoref.current.srcObject = e.stream\n// }\n// this.pc.ontrack = (e) => {\n//   debugger\n//   // this.remoteVideoref.current.srcObject = e.streams[0]\n//   this.setState({\n//     remoteStream: e.streams[0]\n//   })\n// }\n};_this.switchVideo=function(_video){console.log(_video);_this.setState({selectedVideo:_video});};_this.state={localStream:null,// used to hold local stream object to avoid recreating the stream everytime a new offer comes\nremoteStream:null,// used to hold remote stream object that is displayed in the main screen\nremoteStreams:[],// holds all Video Streams (all remote streams)\npeerConnections:{},// holds all Peer Connections\nselectedVideo:null,status:'Please wait...',pc_config:{\"iceServers\":[{urls:'stun:stun.l.google.com:19302'}]},sdpConstraints:{'mandatory':{'OfferToReceiveAudio':true,'OfferToReceiveVideo':true}},messages:[],sendChannels:[],disconnected:false};// DONT FORGET TO CHANGE TO YOUR URL\n_this.serviceIP='https://a16161d1.ngrok.io/webrtcPeer';// https://reactjs.org/docs/refs-and-the-dom.html\n// this.localVideoref = React.createRef()\n// this.remoteVideoref = React.createRef()\n_this.socket=null;// this.candidates = []\nreturn _this;}_createClass(App,[{key:\"render\",value:function render(){var _this2=this;if(this.state.disconnected){this.socket.close();this.state.localStream.getTracks().forEach(function(track){return track.stop();});return/*#__PURE__*/_jsx(\"div\",{children:\"You have successfully Disconnected\"});}console.log(this.state.localStream);var statusText=/*#__PURE__*/_jsx(\"div\",{style:{color:'yellow',padding:5},children:this.state.status});return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Draggable,{style:{zIndex:101,position:'absolute',right:0,cursor:'move'},children:/*#__PURE__*/_jsx(Video,{videoStyles:{// zIndex:2,\n// position: 'absolute',\n// right:0,\nwidth:200// height: 200,\n// margin: 5,\n// backgroundColor: 'black'\n},frameStyle:{width:200,margin:5,borderRadius:5,backgroundColor:'black'},showMuteControls:true// ref={this.localVideoref}\n,videoStream:this.state.localStream,autoPlay:true,muted:true})}),/*#__PURE__*/_jsx(Video,{videoStyles:{zIndex:1,position:'fixed',bottom:0,minWidth:'100%',minHeight:'100%',backgroundColor:'black'}// ref={ this.remoteVideoref }\n,videoStream:this.state.selectedVideo&&this.state.selectedVideo.stream,autoPlay:true}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"div\",{style:{zIndex:3,position:'absolute'// margin: 10,\n// backgroundColor: '#cdc4ff4f',\n// padding: 10,\n// borderRadius: 5,\n},children:[/*#__PURE__*/_jsx(\"i\",{onClick:function onClick(e){_this2.setState({disconnected:true});},style:{cursor:'pointer',paddingLeft:15,color:'red'},class:\"material-icons\",children:\"highlight_off\"}),/*#__PURE__*/_jsx(\"div\",{style:{margin:10,backgroundColor:'#cdc4ff4f',padding:10,borderRadius:5},children:statusText})]}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Videos,{switchVideo:this.switchVideo,remoteStreams:this.state.remoteStreams})}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Chat,{user:{uid:this.socket&&this.socket.id||''},messages:this.state.messages,sendMessage:function sendMessage(message){_this2.setState(function(prevState){return{messages:[].concat(_toConsumableArray(prevState.messages),[message])};});_this2.state.sendChannels.map(function(sendChannel){sendChannel.readyState==='open'&&sendChannel.send(JSON.stringify(message));});_this2.sendToPeer('new-message',JSON.stringify(message),{local:_this2.socket.id});}})]});}}]);return App;}(Component);export default App;","map":{"version":3,"names":["React","Component","io","Video","Videos","Chat","Draggable","jsx","_jsx","jsxs","_jsxs","App","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","getLocalStream","success","stream","window","localStream","setState","whoisOnline","failure","e","console","log","constraints","audio","video","options","mirror","navigator","mediaDevices","getUserMedia","then","catch","sendToPeer","local","socket","id","messageType","payload","socketID","emit","createPeerConnection","callback","pc","RTCPeerConnection","state","pc_config","peerConnections","_objectSpread","_defineProperty","onicecandidate","candidate","remote","oniceconnectionstatechange","ontrack","remoteVideo","name","streams","prevState","remoteStream","remoteStreams","length","selectedVideo","filter","concat","_toConsumableArray","close","addStream","componentDidMount","connect","serviceIP","path","query","room","location","pathname","on","data","status","peerCount","messages","handleSendChannelStatusChange","event","sendChannels","readyState","sendChannel","createDataChannel","onopen","onclose","handleReceiveMessage","message","JSON","parse","handleReceiveChannelStatusChange","receiveChannel","receiveChannelCallback","channel","onmessage","ondatachannel","createOffer","sdpConstraints","sdp","setLocalDescription","setRemoteDescription","RTCSessionDescription","createAnswer","addIceCandidate","RTCIceCandidate","switchVideo","_video","urls","disconnected","_createClass","key","value","render","_this2","getTracks","forEach","track","stop","children","statusText","style","color","padding","zIndex","position","right","cursor","videoStyles","width","frameStyle","margin","borderRadius","backgroundColor","showMuteControls","videoStream","autoPlay","muted","bottom","minWidth","minHeight","onClick","paddingLeft","class","user","uid","sendMessage","map","send","stringify"],"sources":["/Users/Dani/Desktop/webrtc/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\n\nimport io from 'socket.io-client'\n\nimport Video from './components/video'\nimport Videos from './components/videos'\n\nimport Chat from './components/chat'\n\nimport Draggable from './components/draggable'\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            localStream: null,    // used to hold local stream object to avoid recreating the stream everytime a new offer comes\n            remoteStream: null,    // used to hold remote stream object that is displayed in the main screen\n\n            remoteStreams: [],    // holds all Video Streams (all remote streams)\n            peerConnections: {},  // holds all Peer Connections\n            selectedVideo: null,\n\n            status: 'Please wait...',\n\n            pc_config: {\n                \"iceServers\": [\n                    {\n                        urls : 'stun:stun.l.google.com:19302'\n                    }\n                ]\n            },\n\n            sdpConstraints: {\n                'mandatory': {\n                    'OfferToReceiveAudio': true,\n                    'OfferToReceiveVideo': true\n                }\n            },\n\n            messages: [],\n            sendChannels: [],\n            disconnected: false,\n        }\n\n        // DONT FORGET TO CHANGE TO YOUR URL\n        this.serviceIP = 'https://a16161d1.ngrok.io/webrtcPeer'\n\n        // https://reactjs.org/docs/refs-and-the-dom.html\n        // this.localVideoref = React.createRef()\n        // this.remoteVideoref = React.createRef()\n\n        this.socket = null\n        // this.candidates = []\n    }\n\n    getLocalStream = () => {\n        // called when getUserMedia() successfully returns - see below\n        // getUserMedia() returns a MediaStream object (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\n        const success = (stream) => {\n            window.localStream = stream\n            // this.localVideoref.current.srcObject = stream\n            // this.pc.addStream(stream);\n            this.setState({\n                localStream: stream\n            })\n\n            this.whoisOnline()\n        }\n\n        // called when getUserMedia() fails - see below\n        const failure = (e) => {\n            console.log('getUserMedia Error: ', e)\n        }\n\n        // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n        // see the above link for more constraint options\n        const constraints = {\n            audio: true,\n            video: true,\n            // video: {\n            //   width: 1280,\n            //   height: 720\n            // },\n            // video: {\n            //   width: { min: 1280 },\n            // }\n            options: {\n                mirror: true,\n            }\n        }\n\n        // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n        navigator.mediaDevices.getUserMedia(constraints)\n            .then(success)\n            .catch(failure)\n    }\n\n    whoisOnline = () => {\n        // let all peers know I am joining\n        this.sendToPeer('onlinePeers', null, {local: this.socket.id})\n    }\n\n    sendToPeer = (messageType, payload, socketID) => {\n        this.socket.emit(messageType, {\n            socketID,\n            payload\n        })\n    }\n\n    createPeerConnection = (socketID, callback) => {\n\n        try {\n            let pc = new RTCPeerConnection(this.state.pc_config)\n\n            // add pc to peerConnections object\n            const peerConnections = { ...this.state.peerConnections, [socketID]: pc }\n            this.setState({\n                peerConnections\n            })\n\n            pc.onicecandidate = (e) => {\n                if (e.candidate) {\n                    this.sendToPeer('candidate', e.candidate, {\n                        local: this.socket.id,\n                        remote: socketID\n                    })\n                }\n            }\n\n            pc.oniceconnectionstatechange = (e) => {\n                // if (pc.iceConnectionState === 'disconnected') {\n                //   const remoteStreams = this.state.remoteStreams.filter(stream => stream.id !== socketID)\n\n                //   this.setState({\n                //     remoteStream: remoteStreams.length > 0 && remoteStreams[0].stream || null,\n                //   })\n                // }\n\n            }\n\n            pc.ontrack = (e) => {\n\n/*                let _remoteStream = null\n                let remoteStreams = this.state.remoteStreams\n                let remoteVideo = {}\n\n\n                // 1. check if stream already exists in remoteStreams\n                const rVideos = this.state.remoteStreams.filter(stream => stream.id === socketID)\n\n                // 2. if it does exist then add track\n                if (rVideos.length) {\n                    _remoteStream = rVideos[0].stream\n                    _remoteStream.addTrack(e.track, _remoteStream)\n                    remoteVideo = {\n                        ...rVideos[0],\n                        stream: _remoteStream,\n                    }\n                    remoteStreams = this.state.remoteStreams.map(_remoteVideo => {\n                        return _remoteVideo.id === remoteVideo.id && remoteVideo || _remoteVideo\n                    })\n                } else {\n                    // 3. if not, then create new stream and add track\n                    _remoteStream = new MediaStream()\n                    _remoteStream.addTrack(e.track, _remoteStream)\n\n                    remoteVideo = {\n                        id: socketID,\n                        name: socketID,\n                        stream: _remoteStream,\n                    }\n                    remoteStreams = [...this.state.remoteStreams, remoteVideo]\n                }\n*/\n                 const remoteVideo = {\n                   id: socketID,\n                   name: socketID,\n                   stream: e.streams[0]\n                 }\n\n                this.setState(prevState => {\n\n                    // If we already have a stream in display let it stay the same, otherwise use the latest stream\n                     const remoteStream = prevState.remoteStreams.length > 0 ? {} : { remoteStream: e.streams[0] }\n                    //const remoteStream = prevState.remoteStreams.length > 0 ? {} : { remoteStream: _remoteStream }\n\n                    // get currently selected video\n                    let selectedVideo = prevState.remoteStreams.filter(stream => stream.id === prevState.selectedVideo.id)\n                    // if the video is still in the list, then do nothing, otherwise set to new video stream\n                    selectedVideo = selectedVideo.length ? {} : { selectedVideo: remoteVideo }\n\n                    return {\n                        // selectedVideo: remoteVideo,\n                        ...selectedVideo,\n                        // remoteStream: e.streams[0],\n                        ...remoteStream,\n                        remoteStreams : [...prevState.remoteStreams, remoteVideo]\n                    }\n                })\n            }\n\n            pc.close = () => {\n                // alert('GONE')\n            }\n\n            if (this.state.localStream)\n                pc.addStream(this.state.localStream)\n\n                //this.state.localStream.getTracks().forEach(track => {\n                //    pc.addTrack(track, this.state.localStream)\n                //})\n\n            // return pc\n            callback(pc)\n\n        } catch(e) {\n            console.log('Something went wrong! pc not created!!', e)\n            // return;\n            callback(null)\n        }\n    }\n\n    componentDidMount = () => {\n\n        this.socket = io.connect(\n            this.serviceIP,\n            {\n                path: '/io/webrtc',\n                query: {\n                    room: window.location.pathname,\n                }\n            }\n        )\n\n        this.socket.on('connection-success', data => {\n\n            this.getLocalStream()\n\n            console.log(data.success)\n            const status = data.peerCount > 1 ? `Total Connected Peers to room ${window.location.pathname}: ${data.peerCount}` : 'Waiting for other peers to connect'\n\n            this.setState({\n                status: status,\n                messages: data.messages\n            })\n        })\n\n        this.socket.on('joined-peers', data => {\n\n            this.setState({\n                status: data.peerCount > 1 ? `Total Connected Peers to room ${window.location.pathname}: ${data.peerCount}` : 'Waiting for other peers to connect'\n            })\n        })\n\n        this.socket.on('peer-disconnected', data => {\n            console.log('peer-disconnected', data)\n\n            const remoteStreams = this.state.remoteStreams.filter(stream => stream.id !== data.socketID)\n\n            this.setState(prevState => {\n                    // check if disconnected peer is the selected video and if there still connected peers, then select the first\n                    const selectedVideo = prevState.selectedVideo.id === data.socketID && remoteStreams.length ? { selectedVideo: remoteStreams[0] } : null\n\n                    return {\n                        // remoteStream: remoteStreams.length > 0 && remoteStreams[0].stream || null,\n                        remoteStreams,\n                        ...selectedVideo,\n                        status: data.peerCount > 1 ? `Total Connected Peers to room ${window.location.pathname}: ${data.peerCount}` : 'Waiting for other peers to connect'\n                    }\n                }\n            )\n        })\n\n        // this.socket.on('offerOrAnswer', (sdp) => {\n\n        //   this.textref.value = JSON.stringify(sdp)\n\n        //   // set sdp as remote description\n        //   this.pc.setRemoteDescription(new RTCSessionDescription(sdp))\n        // })\n\n        this.socket.on('online-peer', socketID => {\n            console.log('connected peers ...', socketID)\n\n            // create and send offer to the peer (data.socketID)\n            // 1. Create new pc\n            this.createPeerConnection(socketID, pc => {\n                // 2. Create Offer\n                if (pc) {\n\n                    // Send Channel\n                    const handleSendChannelStatusChange = (event) => {\n                        console.log('send channel status: ' + this.state.sendChannels[0].readyState)\n                    }\n\n                    const sendChannel = pc.createDataChannel('sendChannel')\n                    sendChannel.onopen = handleSendChannelStatusChange\n                    sendChannel.onclose = handleSendChannelStatusChange\n\n                    this.setState(prevState => {\n                        return {\n                            sendChannels: [...prevState.sendChannels, sendChannel]\n                        }\n                    })\n\n\n                    // Receive Channels\n                    const handleReceiveMessage = (event) => {\n                        const message = JSON.parse(event.data)\n                        console.log(message)\n                        this.setState(prevState => {\n                            return {\n                                messages: [...prevState.messages, message]\n                            }\n                        })\n                    }\n\n                    const handleReceiveChannelStatusChange = (event) => {\n                        if (this.receiveChannel) {\n                            console.log(\"receive channel's status has changed to \" + this.receiveChannel.readyState);\n                        }\n                    }\n\n                    const receiveChannelCallback = (event) => {\n                        const receiveChannel = event.channel\n                        receiveChannel.onmessage = handleReceiveMessage\n                        receiveChannel.onopen = handleReceiveChannelStatusChange\n                        receiveChannel.onclose = handleReceiveChannelStatusChange\n                    }\n\n                    pc.ondatachannel = receiveChannelCallback\n\n\n                    pc.createOffer(this.state.sdpConstraints)\n                        .then(sdp => {\n                            pc.setLocalDescription(sdp)\n\n                            this.sendToPeer('offer', sdp, {\n                                local: this.socket.id,\n                                remote: socketID\n                            })\n                        })\n                }\n            })\n        })\n\n        this.socket.on('offer', data => {\n            this.createPeerConnection(data.socketID, pc => {\n                pc.addStream(this.state.localStream)\n\n                // Send Channel\n                const handleSendChannelStatusChange = (event) => {\n                    console.log('send channel status: ' + this.state.sendChannels[0].readyState)\n                }\n\n                const sendChannel = pc.createDataChannel('sendChannel')\n                sendChannel.onopen = handleSendChannelStatusChange\n                sendChannel.onclose = handleSendChannelStatusChange\n\n                this.setState(prevState => {\n                    return {\n                        sendChannels: [...prevState.sendChannels, sendChannel]\n                    }\n                })\n\n                // Receive Channels\n                const handleReceiveMessage = (event) => {\n                    const message = JSON.parse(event.data)\n                    console.log(message)\n                    this.setState(prevState => {\n                        return {\n                            messages: [...prevState.messages, message]\n                        }\n                    })\n                }\n\n                const handleReceiveChannelStatusChange = (event) => {\n                    if (this.receiveChannel) {\n                        console.log(\"receive channel's status has changed to \" + this.receiveChannel.readyState);\n                    }\n                }\n\n                const receiveChannelCallback = (event) => {\n                    const receiveChannel = event.channel\n                    receiveChannel.onmessage = handleReceiveMessage\n                    receiveChannel.onopen = handleReceiveChannelStatusChange\n                    receiveChannel.onclose = handleReceiveChannelStatusChange\n                }\n\n                pc.ondatachannel = receiveChannelCallback\n\n                pc.setRemoteDescription(new RTCSessionDescription(data.sdp)).then(() => {\n                    // 2. Create Answer\n                    pc.createAnswer(this.state.sdpConstraints)\n                        .then(sdp => {\n                            pc.setLocalDescription(sdp)\n\n                            this.sendToPeer('answer', sdp, {\n                                local: this.socket.id,\n                                remote: data.socketID\n                            })\n                        })\n                })\n            })\n        })\n\n        this.socket.on('answer', data => {\n            // get remote's peerConnection\n            const pc = this.state.peerConnections[data.socketID]\n            console.log(data.sdp)\n            pc.setRemoteDescription(new RTCSessionDescription(data.sdp)).then(()=>{})\n        })\n\n        this.socket.on('candidate', (data) => {\n            // get remote's peerConnection\n            const pc = this.state.peerConnections[data.socketID]\n\n            if (pc)\n                pc.addIceCandidate(new RTCIceCandidate(data.candidate))\n        })\n\n        // const pc_config = null\n\n        // const pc_config = {\n        //   \"iceServers\": [\n        //     // {\n        //     //   urls: 'stun:[STUN_IP]:[PORT]',\n        //     //   'credentials': '[YOR CREDENTIALS]',\n        //     //   'username': '[USERNAME]'\n        //     // },\n        //     {\n        //       urls : 'stun:stun.l.google.com:19302'\n        //     }\n        //   ]\n        // }\n\n        // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\n        // create an instance of RTCPeerConnection\n        // this.pc = new RTCPeerConnection(this.state.pc_config)\n\n        // triggered when a new candidate is returned\n        // this.pc.onicecandidate = (e) => {\n        //   // send the candidates to the remote peer\n        //   // see addCandidate below to be triggered on the remote peer\n        //   if (e.candidate) {\n        //     // console.log(JSON.stringify(e.candidate))\n        //     this.sendToPeer('candidate', e.candidate)\n        //   }\n        // }\n\n        // triggered when there is a change in connection state\n        // this.pc.oniceconnectionstatechange = (e) => {\n        //   console.log(e)\n        // }\n\n        // triggered when a stream is added to pc, see below - this.pc.addStream(stream)\n        // this.pc.onaddstream = (e) => {\n        //   this.remoteVideoref.current.srcObject = e.stream\n        // }\n\n        // this.pc.ontrack = (e) => {\n        //   debugger\n        //   // this.remoteVideoref.current.srcObject = e.streams[0]\n\n        //   this.setState({\n        //     remoteStream: e.streams[0]\n        //   })\n        // }\n\n    }\n\n    switchVideo = (_video) => {\n        console.log(_video)\n        this.setState({\n            selectedVideo: _video\n        })\n    }\n\n    render() {\n\n        if (this.state.disconnected) {\n            this.socket.close()\n            this.state.localStream.getTracks().forEach(track => track.stop())\n            return (<div>You have successfully Disconnected</div>)\n        }\n\n        console.log(this.state.localStream)\n\n        const statusText = <div style={{ color: 'yellow', padding: 5 }}>{this.state.status}</div>\n\n        return (\n            <div>\n                <Draggable style={{\n                    zIndex: 101,\n                    position: 'absolute',\n                    right: 0,\n                    cursor: 'move'\n                }}>\n                    <Video\n                        videoStyles={{\n                            // zIndex:2,\n                            // position: 'absolute',\n                            // right:0,\n                            width: 200,\n                            // height: 200,\n                            // margin: 5,\n                            // backgroundColor: 'black'\n                        }}\n                        frameStyle={{\n                            width: 200,\n                            margin: 5,\n                            borderRadius: 5,\n                            backgroundColor: 'black',\n                        }}\n                        showMuteControls={true}\n                        // ref={this.localVideoref}\n                        videoStream={this.state.localStream}\n                        autoPlay muted>\n                    </Video>\n                </Draggable>\n                <Video\n                    videoStyles={{\n                        zIndex: 1,\n                        position: 'fixed',\n                        bottom: 0,\n                        minWidth: '100%',\n                        minHeight: '100%',\n                        backgroundColor: 'black'\n                    }}\n                    // ref={ this.remoteVideoref }\n                    videoStream={this.state.selectedVideo && this.state.selectedVideo.stream}\n                    autoPlay>\n                </Video>\n                <br />\n                <div style={{\n                    zIndex: 3,\n                    position: 'absolute',\n                    // margin: 10,\n                    // backgroundColor: '#cdc4ff4f',\n                    // padding: 10,\n                    // borderRadius: 5,\n                }}>\n                    <i onClick={(e) => {this.setState({disconnected: true})}} style={{ cursor: 'pointer', paddingLeft: 15, color: 'red' }} class='material-icons'>highlight_off</i>\n                    <div style={{\n                        margin: 10,\n                        backgroundColor: '#cdc4ff4f',\n                        padding: 10,\n                        borderRadius: 5,\n                    }}>{ statusText }</div>\n                </div>\n                <div>\n                    <Videos\n                        switchVideo={this.switchVideo}\n                        remoteStreams={this.state.remoteStreams}\n                    ></Videos>\n                </div>\n                <br />\n\n                <Chat\n                    user={{\n                        uid: this.socket && this.socket.id || ''\n                    }}\n                    messages={this.state.messages}\n                    sendMessage={(message) => {\n                        this.setState(prevState => {\n                            return {messages: [...prevState.messages, message]}\n                        })\n                        this.state.sendChannels.map(sendChannel => {\n                            sendChannel.readyState === 'open' && sendChannel.send(JSON.stringify(message))\n                        })\n                        this.sendToPeer('new-message', JSON.stringify(message), {local: this.socket.id})\n                    }}\n                />\n\n                {/* <div style={{zIndex: 1, position: 'fixed'}} >\n          <button onClick={this.createOffer}>Offer</button>\n          <button onClick={this.createAnswer}>Answer</button>\n\n          <br />\n          <textarea style={{ width: 450, height:40 }} ref={ref => { this.textref = ref }} />\n        </div> */}\n                {/* <br />\n        <button onClick={this.setRemoteDescription}>Set Remote Desc</button>\n        <button onClick={this.addCandidate}>Add Candidate</button> */}\n            </div>\n        )\n    }\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
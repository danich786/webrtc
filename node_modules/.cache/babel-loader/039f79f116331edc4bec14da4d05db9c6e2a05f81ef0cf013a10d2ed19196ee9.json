{"ast":null,"code":"import _toConsumableArray from\"/Users/Dani/Desktop/webrtc/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _defineProperty from\"/Users/Dani/Desktop/webrtc/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _objectSpread from\"/Users/Dani/Desktop/webrtc/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _classCallCheck from\"/Users/Dani/Desktop/webrtc/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/Dani/Desktop/webrtc/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"/Users/Dani/Desktop/webrtc/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/Dani/Desktop/webrtc/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import React,{Component}from'react';import io from'socket.io-client';import Video from'./components/video';import Videos from'./components/videos';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);var _super=_createSuper(App);function App(props){var _this;_classCallCheck(this,App);_this=_super.call(this,props);_this.componentDidMount=function(){_this.socket=io.connect(_this.serviceIP,{path:'/webrtc',query:{}});_this.socket.on('connection-success',function(data){_this.getLocalStream();console.log(data.success);var status=data.peerCount>1?\"Total Connected Peers: \".concat(data.peerCount):'Waiting for others peers to connect';_this.setState({status:status});});_this.socket.on('peer-disconnected',function(data){console.log('peer-disconnected',data);var remoteStreams=_this.state.remoteStreams.filter(function(stream){return stream.id!==data.socketID;});_this.setState(function(prevState){// check if disconnected peer is the selected video and if there still connected peers, then select the first\nvar selectedVideo=prevState.selectedVideo.id===data.socketID&&remoteStreams.length?{selectedVideo:remoteStreams[0]}:null;return _objectSpread({// remoteStream: remoteStreams.length > 0 && remoteStreams[0].stream || null,\nremoteStreams:remoteStreams},selectedVideo);});});// this.socket.on('offerOrAnswer', (sdp) => {\n//   this.textref.value = JSON.stringify(sdp)\n//\n//   // set sdp as remote description\n//   this.pc.setRemoteDescription(new RTCSessionDescription(sdp))\n// })\n_this.socket.on('candidate',function(data){// console.log('From Peer... ', JSON.stringify(candidate))\n// this.candidates = [...this.candidates, candidate]\nvar pc=_this.state.peerConnections[data.socketID];if(pc)pc.addIceCandidate(new RTCIceCandidate(data.candidate));});_this.socket.on('online-peer',function(socketID){console.log('connected peers ...',socketID);// create and send offer to the peer (data.socketID)\n// 1. Create new pc\n_this.createPeerConnection(socketID,function(pc){// 2. Create Offer\nif(pc)pc.createOffer(_this.state.sdpConstraints).then(function(sdp){pc.setLocalDescription(sdp);_this.sendToPeer('offer',sdp,{local:_this.socket.id,remote:socketID});});});});_this.socket.on('offer',function(data){_this.createPeerConnection(data.socketID,function(pc){pc.addStream(_this.state.localStream);pc.setRemoteDescription(new RTCSessionDescription(data.sdp)).then(function(){// 2. Create Answer\npc.createAnswer(_this.state.sdpConstraints).then(function(sdp){pc.setLocalDescription(sdp);_this.sendToPeer('answer',sdp,{local:_this.socket.id,remote:data.socketID});});});});});_this.socket.on('answer',function(data){// get remote's peerConnection\nvar pc=_this.state.peerConnections[data.socketID];//console.log(data.sdp)\npc.setRemoteDescription(new RTCSessionDescription(data.sdp)).then(function(){});});// const pc_config = null\n// https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\n// create an instance of RTCPeerConnection\n//this.pc = new RTCPeerConnection(this.state.pc_config)\n// triggered when a new candidate is returned\n//  this.pc.onicecandidate = (e) => {\n//  // send the candidates to the remote peer\n//  // see addCandidate below to be triggered on the remote peer\n//  if (e.candidate) {\n//    // console.log(JSON.stringify(e.candidate))\n//    this.sendToPeer('candidate', e.candidate)\n//  }\n//}\n// triggered when there is a change in connection state\n//this.pc.oniceconnectionstatechange = (e) => {\n//  console.log(e)\n//}\n// triggered when a stream is added to pc, see below - this.pc.addStream(stream)\n//this.pc.onaddstream = (e) => {\n//  this.remoteVideoref.current.srcObject = e.stream\n//}\n//this.pc.ontrack = (e) => {\n//  debugger\n//  //this.remoteVideoref.current.srcObject = e.streams[0]\n//  this.setState({\n//    remoteStream: e.streams[0]\n//   })\n// }\n};_this.getLocalStream=function(){// called when getUserMedia() successfully returns - see below\n// getUserMedia() returns a MediaStream object (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\nvar success=function success(stream){window.localStream=stream;// this.localVideoref.current.srcObject = stream\n//this.pc.addStream(stream);\n_this.setState({localStream:stream});_this.whoisOnline();};// called when getUserMedia() fails - see below\nvar failure=function failure(e){console.log('getUserMedia Error: ',e);};// https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n// see the above link for more constraint options\nvar constraints={// audio: true,\nvideo:true,// video: {\n//   width: 1280,\n//   height: 720\n// },\n// video: {\n//   width: { min: 1280 },\n// }\noptions:{mirror:true}};// https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\nnavigator.mediaDevices.getUserMedia(constraints).then(success).catch(failure);};_this.whoisOnline=function(){// let all peers know I am joining\n_this.sendToPeer('onlinePeers',null,{local:_this.socket.id});};_this.sendToPeer=function(messageType,payload,socketID){_this.socket.emit(messageType,{socketID:socketID,payload:payload});};_this.createPeerConnection=function(socketID,callback){try{var pc=new RTCPeerConnection(_this.state.pc_config);// add pc to peerConnections object\nvar peerConnections=_objectSpread(_objectSpread({},_this.state.peerConnections),{},_defineProperty({},socketID,pc));_this.setState({peerConnections:peerConnections});pc.onicecandidate=function(e){if(e.candidate){_this.sendToPeer('candidate',e.candidate,{local:_this.socket.id,remote:socketID});}};pc.oniceconnectionstatechange=function(e){// if (pc.iceConnectionState === 'disconnected') {\n//     const remoteStreams = this.state.remoteStreams.filter(stream => stream.id !== socketID)\n//\n//     this.setState({\n//         remoteStream: remoteStreams.length > 0 && remoteStreams[0].stream || null,\n//     })\n// }\n};pc.ontrack=function(e){var remoteVideo={id:socketID,name:socketID,stream:e.streams[0]};_this.setState(function(prevState){// If we already have a stream in display let it stay the same, otherwise use the latest stream\nvar remoteStream=prevState.remoteStreams.length>0?{}:{remoteStream:e.streams[0]};// get currently selected video\nvar selectedVideo=prevState.remoteStreams.filter(function(stream){return stream.id===prevState.selectedVideo.id;});// if the video is still in the list, then do nothing, otherwise set to new video stream\nselectedVideo=selectedVideo.length?{}:{selectedVideo:remoteVideo};return _objectSpread(_objectSpread(_objectSpread({},selectedVideo),remoteStream),{},{remoteStreams:[].concat(_toConsumableArray(prevState.remoteStreams),[remoteVideo])});});};pc.close=function(){// alert('GONE')\n};if(_this.state.localStream)pc.addStream(_this.state.localStream);//return pc\ncallback(pc);}catch(e){console.log('Something went wrong! pc not created!!',e);//return;\ncallback(null);}};/* ACTION METHODS FROM THE BUTTONS ON SCREEN */ // createOffer = () => {\n//   console.log('Offer')\n//\n//   // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer\n//   // initiates the creation of SDP\n//   this.pc.createOffer(this.state.sdpConstraints)\n//     .then(sdp => {\n//       // console.log(JSON.stringify(sdp))\n//\n//       // set offer sdp as local description\n//       this.pc.setLocalDescription(sdp)\n//\n//       this.sendToPeer('offerOrAnswer', sdp)\n//   })\n// }\n// https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createAnswer\n// creates an SDP answer to an offer received from remote peer\n// createAnswer = () => {\n//   console.log('Answer')\n//   this.pc.createAnswer(this.state.sdpConstraints)\n//     .then(sdp => {\n//       // console.log(JSON.stringify(sdp))\n//\n//       // set answer sdp as local description\n//       this.pc.setLocalDescription(sdp)\n//\n//       this.sendToPeer('offerOrAnswer', sdp)\n//   })\n// }\n// setRemoteDescription = () => {\n//   // retrieve and parse the SDP copied from the remote peer\n//   const desc = JSON.parse(this.textref.value)\n//\n//   // set sdp as remote description\n//   this.pc.setRemoteDescription(new RTCSessionDescription(desc))\n// }\n// addCandidate = () => {\n//   // retrieve and parse the Candidate copied from the remote peer\n//   // const candidate = JSON.parse(this.textref.value)\n//   // console.log('Adding candidate:', candidate)\n//\n//   // add the candidate to the peer connection\n//   // this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n//\n//   this.candidates.forEach(candidate => {\n//     console.log(JSON.stringify(candidate))\n//     this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n//   });\n// }\n_this.switchVideo=function(_video){console.log(_video);_this.setState({selectedVideo:_video});};_this.state={localStream:null,// used to hold local stream object to avoid recreating the stream everytime a new offer comes\nremoteStream:null,// used to hold remote stream object that is displayed in the main screen\nremoteStreams:[],// holds all Video Streams (all remote streams)\npeerConnections:{},// holds all Peer Connections\nselectedVideo:null,status:'Please wait...',pc_config:{\"iceServers\":[{urls:'stun:stun.l.google.com:19302'}]},sdpConstraints:{'mandatory':{'OfferToReceiveAudio':true,'OfferToReceiveVideo':true}}};// DONT FORGET TO CHANGE TO YOUR URL\n_this.serviceIP='https://traho.serveo.net/webrtcPeer';// https://reactjs.org/docs/refs-and-the-dom.html\n//this.localVideoref = React.createRef()\n//this.remoteVideoref = React.createRef()\n_this.socket=null;//this.candidates = []\nreturn _this;}_createClass(App,[{key:\"render\",value:function render(){console.log(this.state.localStream);var statusText=/*#__PURE__*/_jsx(\"div\",{style:{color:'yellow',padding:5},children:this.state.status});return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Video,{videoStyles:{zIndex:2,position:'absolute',right:0,width:200,height:200,margin:5,backgroundColor:'black'}//ref={this.localVideoref}\n,videoStream:this.state.localStream,autoPlay:true,muted:true}),/*#__PURE__*/_jsx(Video,{videoStyles:{zIndex:1,position:'fixed',bottom:0,minWidth:'100%',minHeight:'100%',backgroundColor:'black'}//ref={ this.remoteVideoref }\n,videoStream:this.state.selectedVideo&&this.state.selectedVideo.stream,autoPlay:true}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"div\",{style:{zIndex:3,position:'absolute',margin:10,backgroundColor:'#cdc4ff4f',padding:10,borderRadius:5},children:statusText}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Videos,{switchVideo:this.switchVideo,remoteStreams:this.state.remoteStreams})}),/*#__PURE__*/_jsx(\"br\",{})]});}}]);return App;}(Component);export default App;","map":{"version":3,"names":["React","Component","io","Video","Videos","jsx","_jsx","jsxs","_jsxs","App","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","componentDidMount","socket","connect","serviceIP","path","query","on","data","getLocalStream","console","log","success","status","peerCount","concat","setState","remoteStreams","state","filter","stream","id","socketID","prevState","selectedVideo","length","_objectSpread","pc","peerConnections","addIceCandidate","RTCIceCandidate","candidate","createPeerConnection","createOffer","sdpConstraints","then","sdp","setLocalDescription","sendToPeer","local","remote","addStream","localStream","setRemoteDescription","RTCSessionDescription","createAnswer","window","whoisOnline","failure","e","constraints","video","options","mirror","navigator","mediaDevices","getUserMedia","catch","messageType","payload","emit","callback","RTCPeerConnection","pc_config","_defineProperty","onicecandidate","oniceconnectionstatechange","ontrack","remoteVideo","name","streams","remoteStream","_toConsumableArray","close","switchVideo","_video","urls","_createClass","key","value","render","statusText","style","color","padding","children","videoStyles","zIndex","position","right","width","height","margin","backgroundColor","videoStream","autoPlay","muted","bottom","minWidth","minHeight","borderRadius"],"sources":["/Users/Dani/Desktop/webrtc/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\n\nimport io from 'socket.io-client'\n\nimport Video from './components/video'\nimport Videos from './components/videos'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      localStream: null,    // used to hold local stream object to avoid recreating the stream everytime a new offer comes\n      remoteStream: null,    // used to hold remote stream object that is displayed in the main screen\n\n      remoteStreams: [],    // holds all Video Streams (all remote streams)\n      peerConnections: {},  // holds all Peer Connections\n      selectedVideo: null,\n\n      status: 'Please wait...',\n\n      pc_config: {\n      \"iceServers\": [\n          {\n            urls : 'stun:stun.l.google.com:19302'\n          }\n        ]\n      },\n\n      sdpConstraints: {\n        'mandatory': {\n          'OfferToReceiveAudio': true,\n          'OfferToReceiveVideo': true\n        }\n      },\n    }\n\n    // DONT FORGET TO CHANGE TO YOUR URL\n  this.serviceIP = 'https://traho.serveo.net/webrtcPeer'\n\n\n\n    // https://reactjs.org/docs/refs-and-the-dom.html\n    //this.localVideoref = React.createRef()\n    //this.remoteVideoref = React.createRef()\n    this.socket = null\n    //this.candidates = []\n  }\n\n  componentDidMount = () => {\n\n    this.socket = io.connect(\n      this.serviceIP,\n      {\n        path: '/webrtc',\n        query: {}\n      }\n    )\n\n    this.socket.on('connection-success', data => {\n\n        this.getLocalStream()\n\n      console.log(data.success)\n      const status = data.peerCount > 1 ? `Total Connected Peers: ${data.peerCount}` :  'Waiting for others peers to connect'\n\n      this.setState({\n          status: status\n        })\n    })\n\n      this.socket.on('peer-disconnected', data => {\n          console.log('peer-disconnected', data)\n\n          const remoteStreams = this.state.remoteStreams.filter(stream => stream.id !== data.socketID)\n\n          this.setState(prevState => {\n                  // check if disconnected peer is the selected video and if there still connected peers, then select the first\n                  const selectedVideo = prevState.selectedVideo.id === data.socketID && remoteStreams.length ? { selectedVideo: remoteStreams[0] } : null\n\n                  return {\n                      // remoteStream: remoteStreams.length > 0 && remoteStreams[0].stream || null,\n                      remoteStreams,\n                      ...selectedVideo,\n                  }\n              }\n          )\n      })\n\n    // this.socket.on('offerOrAnswer', (sdp) => {\n    //   this.textref.value = JSON.stringify(sdp)\n    //\n    //   // set sdp as remote description\n    //   this.pc.setRemoteDescription(new RTCSessionDescription(sdp))\n    // })\n\n    this.socket.on('candidate', (data) => {\n      // console.log('From Peer... ', JSON.stringify(candidate))\n      // this.candidates = [...this.candidates, candidate]\n        const pc = this.state.peerConnections[data.socketID]\n      if (pc)\n        pc.addIceCandidate(new RTCIceCandidate(data.candidate))\n    })\n\n      this.socket.on('online-peer', socketID => {\n          console.log('connected peers ...', socketID)\n\n          // create and send offer to the peer (data.socketID)\n          // 1. Create new pc\n          this.createPeerConnection(socketID, pc => {\n              // 2. Create Offer\n              if (pc)\n                  pc.createOffer(this.state.sdpConstraints)\n                      .then(sdp => {\n                          pc.setLocalDescription(sdp)\n\n                          this.sendToPeer('offer', sdp, {\n                              local: this.socket.id,\n                              remote: socketID\n                          })\n                      })\n          })\n\n      })\n\n      this.socket.on('offer', data => {\n          this.createPeerConnection(data.socketID, pc => {\n              pc.addStream(this.state.localStream)\n\n              pc.setRemoteDescription(new RTCSessionDescription(data.sdp)).then(() => {\n                  // 2. Create Answer\n                  pc.createAnswer(this.state.sdpConstraints)\n                      .then(sdp => {\n                          pc.setLocalDescription(sdp)\n\n                          this.sendToPeer('answer', sdp, {\n                              local: this.socket.id,\n                              remote: data.socketID,\n                          })\n                      })\n              })\n          })\n      })\n\n      this.socket.on('answer', data => {\n          // get remote's peerConnection\n          const pc = this.state.peerConnections[data.socketID]\n          //console.log(data.sdp)\n          pc.setRemoteDescription(new RTCSessionDescription(data.sdp)).then(()=>{})\n      })\n\n      // const pc_config = null\n\n\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\n    // create an instance of RTCPeerConnection\n    //this.pc = new RTCPeerConnection(this.state.pc_config)\n\n    // triggered when a new candidate is returned\n    //  this.pc.onicecandidate = (e) => {\n    //  // send the candidates to the remote peer\n    //  // see addCandidate below to be triggered on the remote peer\n    //  if (e.candidate) {\n    //    // console.log(JSON.stringify(e.candidate))\n    //    this.sendToPeer('candidate', e.candidate)\n    //  }\n    //}\n\n    // triggered when there is a change in connection state\n    //this.pc.oniceconnectionstatechange = (e) => {\n    //  console.log(e)\n    //}\n\n    // triggered when a stream is added to pc, see below - this.pc.addStream(stream)\n    //this.pc.onaddstream = (e) => {\n    //  this.remoteVideoref.current.srcObject = e.stream\n    //}\n\n    //this.pc.ontrack = (e) => {\n    //  debugger\n    //  //this.remoteVideoref.current.srcObject = e.streams[0]\n\n    //  this.setState({\n    //    remoteStream: e.streams[0]\n   //   })\n   // }\n  }\n\n    getLocalStream = () => {\n        // called when getUserMedia() successfully returns - see below\n        // getUserMedia() returns a MediaStream object (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\n        const success = (stream) => {\n            window.localStream = stream\n            // this.localVideoref.current.srcObject = stream\n            //this.pc.addStream(stream);\n            this.setState({\n                localStream: stream\n            })\n\n            this.whoisOnline()\n        }\n\n        // called when getUserMedia() fails - see below\n        const failure = (e) => {\n            console.log('getUserMedia Error: ', e)\n        }\n\n        // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n        // see the above link for more constraint options\n        const constraints = {\n            // audio: true,\n            video: true,\n            // video: {\n            //   width: 1280,\n            //   height: 720\n            // },\n            // video: {\n            //   width: { min: 1280 },\n            // }\n            options: {\n                mirror: true,\n            }\n        }\n\n        // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n        navigator.mediaDevices.getUserMedia(constraints)\n            .then(success)\n            .catch(failure)\n    }\n\n    whoisOnline = () => {\n        // let all peers know I am joining\n        this.sendToPeer('onlinePeers', null, {local: this.socket.id})\n    }\n\n  sendToPeer = (messageType, payload, socketID) => {\n    this.socket.emit(messageType,{\n      socketID,\n      payload\n    })\n  }\n\n    createPeerConnection = (socketID, callback) => {\n\n        try {\n            let pc = new RTCPeerConnection(this.state.pc_config)\n\n            // add pc to peerConnections object\n            const peerConnections = {...this.state.peerConnections, [socketID]: pc}\n            this.setState({\n                peerConnections\n            })\n\n            pc.onicecandidate = (e) => {\n                if (e.candidate) {\n                    this.sendToPeer('candidate', e.candidate, {\n                        local: this.socket.id,\n                        remote: socketID\n                    })\n                }\n            }\n\n            pc.oniceconnectionstatechange = (e) => {\n                // if (pc.iceConnectionState === 'disconnected') {\n                //     const remoteStreams = this.state.remoteStreams.filter(stream => stream.id !== socketID)\n                //\n                //     this.setState({\n                //         remoteStream: remoteStreams.length > 0 && remoteStreams[0].stream || null,\n                //     })\n                // }\n\n            }\n\n            pc.ontrack = (e) => {\n                const remoteVideo = {\n                    id: socketID,\n                    name: socketID,\n                    stream: e.streams[0]\n                }\n\n                this.setState(prevState => {\n\n                    // If we already have a stream in display let it stay the same, otherwise use the latest stream\n                    const remoteStream = prevState.remoteStreams.length > 0 ? {} : { remoteStream: e.streams[0] }\n\n                    // get currently selected video\n                    let selectedVideo = prevState.remoteStreams.filter(stream => stream.id === prevState.selectedVideo.id)\n                    // if the video is still in the list, then do nothing, otherwise set to new video stream\n                    selectedVideo = selectedVideo.length ? {} : { selectedVideo: remoteVideo }\n\n                    return {\n                        //selectedVideo: remoteVideo,\n                        ...selectedVideo,\n                        //remoteStream: e.streams[0],\n                        ...remoteStream,\n                        remoteStreams: [...prevState.remoteStreams, remoteVideo]\n                    }\n                })\n            }\n            pc.close = () => {\n                // alert('GONE')\n            }\n\n            if (this.state.localStream)\n                pc.addStream(this.state.localStream)\n\n            //return pc\n            callback(pc)\n\n        } catch(e) {\n            console.log('Something went wrong! pc not created!!', e)\n            //return;\n            callback(null)\n        }\n    }\n\n  /* ACTION METHODS FROM THE BUTTONS ON SCREEN */\n\n  // createOffer = () => {\n  //   console.log('Offer')\n  //\n  //   // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer\n  //   // initiates the creation of SDP\n  //   this.pc.createOffer(this.state.sdpConstraints)\n  //     .then(sdp => {\n  //       // console.log(JSON.stringify(sdp))\n  //\n  //       // set offer sdp as local description\n  //       this.pc.setLocalDescription(sdp)\n  //\n  //       this.sendToPeer('offerOrAnswer', sdp)\n  //   })\n  // }\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createAnswer\n  // creates an SDP answer to an offer received from remote peer\n  // createAnswer = () => {\n  //   console.log('Answer')\n  //   this.pc.createAnswer(this.state.sdpConstraints)\n  //     .then(sdp => {\n  //       // console.log(JSON.stringify(sdp))\n  //\n  //       // set answer sdp as local description\n  //       this.pc.setLocalDescription(sdp)\n  //\n  //       this.sendToPeer('offerOrAnswer', sdp)\n  //   })\n  // }\n\n  // setRemoteDescription = () => {\n  //   // retrieve and parse the SDP copied from the remote peer\n  //   const desc = JSON.parse(this.textref.value)\n  //\n  //   // set sdp as remote description\n  //   this.pc.setRemoteDescription(new RTCSessionDescription(desc))\n  // }\n\n  // addCandidate = () => {\n  //   // retrieve and parse the Candidate copied from the remote peer\n  //   // const candidate = JSON.parse(this.textref.value)\n  //   // console.log('Adding candidate:', candidate)\n  //\n  //   // add the candidate to the peer connection\n  //   // this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n  //\n  //   this.candidates.forEach(candidate => {\n  //     console.log(JSON.stringify(candidate))\n  //     this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n  //   });\n  // }\n\n    switchVideo = (_video) => {\n        console.log(_video)\n        this.setState({\n            selectedVideo: _video\n        })\n    }\n\n  render() {\n\n    console.log(this.state.localStream)\n\n    const statusText = <div style={{ color: 'yellow', padding: 5 }}>{this.state.status}</div>\n\n    return (\n      <div>\n        <Video\n          videoStyles={{\n            zIndex:2,\n            position: 'absolute',\n            right:0,\n            width: 200,\n            height: 200,\n            margin: 5,\n            backgroundColor: 'black'\n          }}\n          //ref={this.localVideoref}\n          videoStream={this.state.localStream}\n          autoPlay muted>\n        </Video>\n        <Video\n          videoStyles={{\n            zIndex: 1,\n            position: 'fixed',\n            bottom: 0,\n            minWidth: '100%',\n            minHeight: '100%',\n            backgroundColor: 'black'\n          }}\n          //ref={ this.remoteVideoref }\n          videoStream={this.state.selectedVideo && this.state.selectedVideo.stream}\n          autoPlay>\n        </Video>\n        <br />\n\n        <div style={{\n          zIndex: 3,\n          position: 'absolute',\n          margin: 10,\n          backgroundColor: '#cdc4ff4f',\n          padding: 10,\n          borderRadius: 5,\n        }}>\n          { statusText }\n        </div>\n        <div>\n          <Videos\n            switchVideo={this.switchVideo}\n            remoteStreams={this.state.remoteStreams}\n          ></Videos>\n        </div>\n        <br />\n\n        {/*<div style={{zIndex: 1, position: 'fixed'}} >\n          <button onClick={this.createOffer}>Offer</button>\n          <button onClick={this.createAnswer}>Answer</button>\n\n          <br />\n          <textarea style={{ width: 450, height:40 }} ref={ref => { this.textref = ref }} />\n        </div>\n\n\n         <br />\n        <button onClick={this.setRemoteDescription}>Set Remote Desc</button>\n        <button onClick={this.addCandidate}>Add Candidate</button> */}\n      </div>\n    )\n  }\n}\n\nexport default App;\n"],"mappings":"ywBAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,KAAQ,OAAO,CAExC,MAAO,CAAAC,EAAE,KAAM,kBAAkB,CAEjC,MAAO,CAAAC,KAAK,KAAM,oBAAoB,CACtC,MAAO,CAAAC,MAAM,KAAM,qBAAqB,QAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,4BAElC,CAAAC,GAAG,uBAAAC,UAAA,EAAAC,SAAA,CAAAF,GAAA,CAAAC,UAAA,MAAAE,MAAA,CAAAC,YAAA,CAAAJ,GAAA,EACP,SAAAA,IAAYK,KAAK,CAAE,KAAAC,KAAA,CAAAC,eAAA,MAAAP,GAAA,EACjBM,KAAA,CAAAH,MAAA,CAAAK,IAAA,MAAMH,KAAK,EAACC,KAAA,CAwCdG,iBAAiB,CAAG,UAAM,CAExBH,KAAA,CAAKI,MAAM,CAAGjB,EAAE,CAACkB,OAAO,CACtBL,KAAA,CAAKM,SAAS,CACd,CACEC,IAAI,CAAE,SAAS,CACfC,KAAK,CAAE,CAAC,CACV,CACF,CAAC,CAEDR,KAAA,CAAKI,MAAM,CAACK,EAAE,CAAC,oBAAoB,CAAE,SAAAC,IAAI,CAAI,CAEzCV,KAAA,CAAKW,cAAc,CAAC,CAAC,CAEvBC,OAAO,CAACC,GAAG,CAACH,IAAI,CAACI,OAAO,CAAC,CACzB,GAAM,CAAAC,MAAM,CAAGL,IAAI,CAACM,SAAS,CAAG,CAAC,2BAAAC,MAAA,CAA6BP,IAAI,CAACM,SAAS,EAAM,qCAAqC,CAEvHhB,KAAA,CAAKkB,QAAQ,CAAC,CACVH,MAAM,CAAEA,MACV,CAAC,CAAC,CACN,CAAC,CAAC,CAEAf,KAAA,CAAKI,MAAM,CAACK,EAAE,CAAC,mBAAmB,CAAE,SAAAC,IAAI,CAAI,CACxCE,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAEH,IAAI,CAAC,CAEtC,GAAM,CAAAS,aAAa,CAAGnB,KAAA,CAAKoB,KAAK,CAACD,aAAa,CAACE,MAAM,CAAC,SAAAC,MAAM,QAAI,CAAAA,MAAM,CAACC,EAAE,GAAKb,IAAI,CAACc,QAAQ,GAAC,CAE5FxB,KAAA,CAAKkB,QAAQ,CAAC,SAAAO,SAAS,CAAI,CACnB;AACA,GAAM,CAAAC,aAAa,CAAGD,SAAS,CAACC,aAAa,CAACH,EAAE,GAAKb,IAAI,CAACc,QAAQ,EAAIL,aAAa,CAACQ,MAAM,CAAG,CAAED,aAAa,CAAEP,aAAa,CAAC,CAAC,CAAE,CAAC,CAAG,IAAI,CAEvI,OAAAS,aAAA,EACI;AACAT,aAAa,CAAbA,aAAa,EACVO,aAAa,EAExB,CACJ,CAAC,CACL,CAAC,CAAC,CAEJ;AACA;AACA;AACA;AACA;AACA;AAEA1B,KAAA,CAAKI,MAAM,CAACK,EAAE,CAAC,WAAW,CAAE,SAACC,IAAI,CAAK,CACpC;AACA;AACE,GAAM,CAAAmB,EAAE,CAAG7B,KAAA,CAAKoB,KAAK,CAACU,eAAe,CAACpB,IAAI,CAACc,QAAQ,CAAC,CACtD,GAAIK,EAAE,CACJA,EAAE,CAACE,eAAe,CAAC,GAAI,CAAAC,eAAe,CAACtB,IAAI,CAACuB,SAAS,CAAC,CAAC,CAC3D,CAAC,CAAC,CAEAjC,KAAA,CAAKI,MAAM,CAACK,EAAE,CAAC,aAAa,CAAE,SAAAe,QAAQ,CAAI,CACtCZ,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAEW,QAAQ,CAAC,CAE5C;AACA;AACAxB,KAAA,CAAKkC,oBAAoB,CAACV,QAAQ,CAAE,SAAAK,EAAE,CAAI,CACtC;AACA,GAAIA,EAAE,CACFA,EAAE,CAACM,WAAW,CAACnC,KAAA,CAAKoB,KAAK,CAACgB,cAAc,CAAC,CACpCC,IAAI,CAAC,SAAAC,GAAG,CAAI,CACTT,EAAE,CAACU,mBAAmB,CAACD,GAAG,CAAC,CAE3BtC,KAAA,CAAKwC,UAAU,CAAC,OAAO,CAAEF,GAAG,CAAE,CAC1BG,KAAK,CAAEzC,KAAA,CAAKI,MAAM,CAACmB,EAAE,CACrBmB,MAAM,CAAElB,QACZ,CAAC,CAAC,CACN,CAAC,CAAC,CACd,CAAC,CAAC,CAEN,CAAC,CAAC,CAEFxB,KAAA,CAAKI,MAAM,CAACK,EAAE,CAAC,OAAO,CAAE,SAAAC,IAAI,CAAI,CAC5BV,KAAA,CAAKkC,oBAAoB,CAACxB,IAAI,CAACc,QAAQ,CAAE,SAAAK,EAAE,CAAI,CAC3CA,EAAE,CAACc,SAAS,CAAC3C,KAAA,CAAKoB,KAAK,CAACwB,WAAW,CAAC,CAEpCf,EAAE,CAACgB,oBAAoB,CAAC,GAAI,CAAAC,qBAAqB,CAACpC,IAAI,CAAC4B,GAAG,CAAC,CAAC,CAACD,IAAI,CAAC,UAAM,CACpE;AACAR,EAAE,CAACkB,YAAY,CAAC/C,KAAA,CAAKoB,KAAK,CAACgB,cAAc,CAAC,CACrCC,IAAI,CAAC,SAAAC,GAAG,CAAI,CACTT,EAAE,CAACU,mBAAmB,CAACD,GAAG,CAAC,CAE3BtC,KAAA,CAAKwC,UAAU,CAAC,QAAQ,CAAEF,GAAG,CAAE,CAC3BG,KAAK,CAAEzC,KAAA,CAAKI,MAAM,CAACmB,EAAE,CACrBmB,MAAM,CAAEhC,IAAI,CAACc,QACjB,CAAC,CAAC,CACN,CAAC,CAAC,CACV,CAAC,CAAC,CACN,CAAC,CAAC,CACN,CAAC,CAAC,CAEFxB,KAAA,CAAKI,MAAM,CAACK,EAAE,CAAC,QAAQ,CAAE,SAAAC,IAAI,CAAI,CAC7B;AACA,GAAM,CAAAmB,EAAE,CAAG7B,KAAA,CAAKoB,KAAK,CAACU,eAAe,CAACpB,IAAI,CAACc,QAAQ,CAAC,CACpD;AACAK,EAAE,CAACgB,oBAAoB,CAAC,GAAI,CAAAC,qBAAqB,CAACpC,IAAI,CAAC4B,GAAG,CAAC,CAAC,CAACD,IAAI,CAAC,UAAI,CAAC,CAAC,CAAC,CAC7E,CAAC,CAAC,CAEF;AAIF;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACD;AACA;AACD,CAAC,CAAArC,KAAA,CAECW,cAAc,CAAG,UAAM,CACnB;AACA;AACA,GAAM,CAAAG,OAAO,CAAG,QAAV,CAAAA,OAAOA,CAAIQ,MAAM,CAAK,CACxB0B,MAAM,CAACJ,WAAW,CAAGtB,MAAM,CAC3B;AACA;AACAtB,KAAA,CAAKkB,QAAQ,CAAC,CACV0B,WAAW,CAAEtB,MACjB,CAAC,CAAC,CAEFtB,KAAA,CAAKiD,WAAW,CAAC,CAAC,CACtB,CAAC,CAED;AACA,GAAM,CAAAC,OAAO,CAAG,QAAV,CAAAA,OAAOA,CAAIC,CAAC,CAAK,CACnBvC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAEsC,CAAC,CAAC,CAC1C,CAAC,CAED;AACA;AACA,GAAM,CAAAC,WAAW,CAAG,CAChB;AACAC,KAAK,CAAE,IAAI,CACX;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,OAAO,CAAE,CACLC,MAAM,CAAE,IACZ,CACJ,CAAC,CAED;AACAC,SAAS,CAACC,YAAY,CAACC,YAAY,CAACN,WAAW,CAAC,CAC3Cf,IAAI,CAACvB,OAAO,CAAC,CACb6C,KAAK,CAACT,OAAO,CAAC,CACvB,CAAC,CAAAlD,KAAA,CAEDiD,WAAW,CAAG,UAAM,CAChB;AACAjD,KAAA,CAAKwC,UAAU,CAAC,aAAa,CAAE,IAAI,CAAE,CAACC,KAAK,CAAEzC,KAAA,CAAKI,MAAM,CAACmB,EAAE,CAAC,CAAC,CACjE,CAAC,CAAAvB,KAAA,CAEHwC,UAAU,CAAG,SAACoB,WAAW,CAAEC,OAAO,CAAErC,QAAQ,CAAK,CAC/CxB,KAAA,CAAKI,MAAM,CAAC0D,IAAI,CAACF,WAAW,CAAC,CAC3BpC,QAAQ,CAARA,QAAQ,CACRqC,OAAO,CAAPA,OACF,CAAC,CAAC,CACJ,CAAC,CAAA7D,KAAA,CAECkC,oBAAoB,CAAG,SAACV,QAAQ,CAAEuC,QAAQ,CAAK,CAE3C,GAAI,CACA,GAAI,CAAAlC,EAAE,CAAG,GAAI,CAAAmC,iBAAiB,CAAChE,KAAA,CAAKoB,KAAK,CAAC6C,SAAS,CAAC,CAEpD;AACA,GAAM,CAAAnC,eAAe,CAAAF,aAAA,CAAAA,aAAA,IAAO5B,KAAA,CAAKoB,KAAK,CAACU,eAAe,KAAAoC,eAAA,IAAG1C,QAAQ,CAAGK,EAAE,EAAC,CACvE7B,KAAA,CAAKkB,QAAQ,CAAC,CACVY,eAAe,CAAfA,eACJ,CAAC,CAAC,CAEFD,EAAE,CAACsC,cAAc,CAAG,SAAChB,CAAC,CAAK,CACvB,GAAIA,CAAC,CAAClB,SAAS,CAAE,CACbjC,KAAA,CAAKwC,UAAU,CAAC,WAAW,CAAEW,CAAC,CAAClB,SAAS,CAAE,CACtCQ,KAAK,CAAEzC,KAAA,CAAKI,MAAM,CAACmB,EAAE,CACrBmB,MAAM,CAAElB,QACZ,CAAC,CAAC,CACN,CACJ,CAAC,CAEDK,EAAE,CAACuC,0BAA0B,CAAG,SAACjB,CAAC,CAAK,CACnC;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,CAEH,CAEDtB,EAAE,CAACwC,OAAO,CAAG,SAAClB,CAAC,CAAK,CAChB,GAAM,CAAAmB,WAAW,CAAG,CAChB/C,EAAE,CAAEC,QAAQ,CACZ+C,IAAI,CAAE/C,QAAQ,CACdF,MAAM,CAAE6B,CAAC,CAACqB,OAAO,CAAC,CAAC,CACvB,CAAC,CAEDxE,KAAA,CAAKkB,QAAQ,CAAC,SAAAO,SAAS,CAAI,CAEvB;AACA,GAAM,CAAAgD,YAAY,CAAGhD,SAAS,CAACN,aAAa,CAACQ,MAAM,CAAG,CAAC,CAAG,CAAC,CAAC,CAAG,CAAE8C,YAAY,CAAEtB,CAAC,CAACqB,OAAO,CAAC,CAAC,CAAE,CAAC,CAE7F;AACA,GAAI,CAAA9C,aAAa,CAAGD,SAAS,CAACN,aAAa,CAACE,MAAM,CAAC,SAAAC,MAAM,QAAI,CAAAA,MAAM,CAACC,EAAE,GAAKE,SAAS,CAACC,aAAa,CAACH,EAAE,GAAC,CACtG;AACAG,aAAa,CAAGA,aAAa,CAACC,MAAM,CAAG,CAAC,CAAC,CAAG,CAAED,aAAa,CAAE4C,WAAY,CAAC,CAE1E,OAAA1C,aAAA,CAAAA,aAAA,CAAAA,aAAA,IAEOF,aAAa,EAEb+C,YAAY,MACftD,aAAa,IAAAF,MAAA,CAAAyD,kBAAA,CAAMjD,SAAS,CAACN,aAAa,GAAEmD,WAAW,EAAC,GAEhE,CAAC,CAAC,CACN,CAAC,CACDzC,EAAE,CAAC8C,KAAK,CAAG,UAAM,CACb;AAAA,CACH,CAED,GAAI3E,KAAA,CAAKoB,KAAK,CAACwB,WAAW,CACtBf,EAAE,CAACc,SAAS,CAAC3C,KAAA,CAAKoB,KAAK,CAACwB,WAAW,CAAC,CAExC;AACAmB,QAAQ,CAAClC,EAAE,CAAC,CAEhB,CAAE,MAAMsB,CAAC,CAAE,CACPvC,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAEsC,CAAC,CAAC,CACxD;AACAY,QAAQ,CAAC,IAAI,CAAC,CAClB,CACJ,CAAC,CAEH,gDAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA/D,KAAA,CAEE4E,WAAW,CAAG,SAACC,MAAM,CAAK,CACtBjE,OAAO,CAACC,GAAG,CAACgE,MAAM,CAAC,CACnB7E,KAAA,CAAKkB,QAAQ,CAAC,CACVQ,aAAa,CAAEmD,MACnB,CAAC,CAAC,CACN,CAAC,CA9WD7E,KAAA,CAAKoB,KAAK,CAAG,CACXwB,WAAW,CAAE,IAAI,CAAK;AACtB6B,YAAY,CAAE,IAAI,CAAK;AAEvBtD,aAAa,CAAE,EAAE,CAAK;AACtBW,eAAe,CAAE,CAAC,CAAC,CAAG;AACtBJ,aAAa,CAAE,IAAI,CAEnBX,MAAM,CAAE,gBAAgB,CAExBkD,SAAS,CAAE,CACX,YAAY,CAAE,CACV,CACEa,IAAI,CAAG,8BACT,CAAC,CAEL,CAAC,CAED1C,cAAc,CAAE,CACd,WAAW,CAAE,CACX,qBAAqB,CAAE,IAAI,CAC3B,qBAAqB,CAAE,IACzB,CACF,CACF,CAAC,CAED;AACFpC,KAAA,CAAKM,SAAS,CAAG,qCAAqC,CAIpD;AACA;AACA;AACAN,KAAA,CAAKI,MAAM,CAAG,IAAI,CAClB;AAAA,OAAAJ,KAAA,CACF,CAAC+E,YAAA,CAAArF,GAAA,GAAAsF,GAAA,UAAAC,KAAA,CA4UD,SAAAC,OAAA,CAAS,CAEPtE,OAAO,CAACC,GAAG,CAAC,IAAI,CAACO,KAAK,CAACwB,WAAW,CAAC,CAEnC,GAAM,CAAAuC,UAAU,cAAG5F,IAAA,QAAK6F,KAAK,CAAE,CAAEC,KAAK,CAAE,QAAQ,CAAEC,OAAO,CAAE,CAAE,CAAE,CAAAC,QAAA,CAAE,IAAI,CAACnE,KAAK,CAACL,MAAM,CAAM,CAAC,CAEzF,mBACEtB,KAAA,QAAA8F,QAAA,eACEhG,IAAA,CAACH,KAAK,EACJoG,WAAW,CAAE,CACXC,MAAM,CAAC,CAAC,CACRC,QAAQ,CAAE,UAAU,CACpBC,KAAK,CAAC,CAAC,CACPC,KAAK,CAAE,GAAG,CACVC,MAAM,CAAE,GAAG,CACXC,MAAM,CAAE,CAAC,CACTC,eAAe,CAAE,OACnB,CACA;AAAA,CACAC,WAAW,CAAE,IAAI,CAAC5E,KAAK,CAACwB,WAAY,CACpCqD,QAAQ,MAACC,KAAK,MACT,CAAC,cACR3G,IAAA,CAACH,KAAK,EACJoG,WAAW,CAAE,CACXC,MAAM,CAAE,CAAC,CACTC,QAAQ,CAAE,OAAO,CACjBS,MAAM,CAAE,CAAC,CACTC,QAAQ,CAAE,MAAM,CAChBC,SAAS,CAAE,MAAM,CACjBN,eAAe,CAAE,OACnB,CACA;AAAA,CACAC,WAAW,CAAE,IAAI,CAAC5E,KAAK,CAACM,aAAa,EAAI,IAAI,CAACN,KAAK,CAACM,aAAa,CAACJ,MAAO,CACzE2E,QAAQ,MACH,CAAC,cACR1G,IAAA,QAAK,CAAC,cAENA,IAAA,QAAK6F,KAAK,CAAE,CACVK,MAAM,CAAE,CAAC,CACTC,QAAQ,CAAE,UAAU,CACpBI,MAAM,CAAE,EAAE,CACVC,eAAe,CAAE,WAAW,CAC5BT,OAAO,CAAE,EAAE,CACXgB,YAAY,CAAE,CAChB,CAAE,CAAAf,QAAA,CACEJ,UAAU,CACT,CAAC,cACN5F,IAAA,QAAAgG,QAAA,cACEhG,IAAA,CAACF,MAAM,EACLuF,WAAW,CAAE,IAAI,CAACA,WAAY,CAC9BzD,aAAa,CAAE,IAAI,CAACC,KAAK,CAACD,aAAc,CACjC,CAAC,CACP,CAAC,cACN5B,IAAA,QAAK,CAAC,EAcH,CAAC,CAEV,CAAC,WAAAG,GAAA,GAzbeR,SAAS,EA4b3B,cAAe,CAAAQ,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}